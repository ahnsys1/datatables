import { Component, OnInit } from '@angular/core';
import { MatDialog, MatDialogRef } from '@angular/material/dialog';
import { Config } from 'datatables.net';
import 'datatables.net-buttons-dt';
import 'datatables.net-select-dt';
import DataTable from 'datatables.net-dt';
import { AddEmployeeComponent } from '../add-employee/add-employee.component';
import { EmployeeService } from '../service/EmployeeService';
import { Employee } from '../shared/model/Employee';
import { DatePipe } from '@angular/common';
import { ConfirmationDialogComponent, ConfirmationDialogData } from '../shared/confirmation-dialog/confirmation-dialog.component';
import { ErrorDialogComponent, ErrorDialogData } from '../shared/error-dialog/error-dialog.component';
import { TranslateModule, TranslateService } from '@ngx-translate/core';
import { TranslatePipe } from '@ngx-translate/core';


@Component({
  selector: 'app-data-tables3',
  templateUrl: './data-tables3.component.html',
  styleUrl: './data-tables3.component.scss'
})
export class DataTables3Component implements OnInit {

  private table!: any;
  private employeeIdToEmployeeMap: Map<string, Employee> = new Map();

  constructor(private dialog: MatDialog, private employeeService: EmployeeService, private translate: TranslateService) { }
  ngOnInit(): void {
    // Using `get` ensures that the translations are loaded before we try to use them.
    // `instant` can fail if the component initializes before the translation file is fetched.
    this.translate.get([
      'datatables.info', 'new-employee', 'edit-employee', 'remove-employee', 'confirm-delete',
      'confirm-delete-message', 'delete', 'cancel', 'id', 'name', 'manager', 'position',
      'office', 'extn', 'start-date', 'salary', 'is-manager', 'yes', 'no'
    ]).subscribe(translations => {
      const dtOptions3: Config = {
        language: {
          info: translations['datatables.info']
        },
        layout: {
          bottom2Start: {
            buttons: [
              {
                text: translations['new-employee'],
                className: "btn btn-primary",
                action: () => {
                  const dialogRef: MatDialogRef<AddEmployeeComponent> = this.dialog.open(AddEmployeeComponent,
                    {
                      disableClose: true,
                      data: { id: null }
                    });
                  dialogRef.afterClosed().subscribe(result => {
                    if (!result) {
                      return;
                    }
                    const e: Employee = new Employee(
                      "", // id is generated by backend
                      result.name,
                      result.position,
                      result.salary,
                      result.start_date,
                      result.office,
                      result.extn,
                      result.hasManagerRights,
                      result.manager);
                    this.addEmployee(e);
                  });
                }

              },
              {
                text: translations['edit-employee'],
                className: "my-button my-disabled-button btn btn-primary",
                name: "editButton",
                action: () => {
                  const rowData = this.table.row(".selected").data();
                  if (rowData == null || rowData == undefined) {
                    return;
                  }
                  const dialogRef: MatDialogRef<AddEmployeeComponent> =
                    this.dialog.open(AddEmployeeComponent,
                      {
                        disableClose: true,
                        data: rowData
                      }
                    )

                  dialogRef.afterClosed().subscribe(result => {
                    if (!result) {
                      return;
                    }
                    const e: Employee = new Employee(
                      result.id,
                      result.name,
                      result.position,
                      result.salary,
                      result.start_date,
                      result.office,
                      result.extn,
                      result.hasManagerRights,
                      result.manager);
                    this.editEmployee(e);
                  });

                }
              },
              {
                text: translations['remove-employee'],
                className: "my-button my-disabled-button btn btn-primary",
                name: "deleteButton",
                action: () => {
                  const rowId = this.table.row('.selected').id();
                  if (rowId != undefined && rowId != null) {
                    const dialogRef = this.dialog.open(ConfirmationDialogComponent, {
                      data: {
                        title: translations['confirm-delete'],
                        message: translations['confirm-delete-message'],
                        confirmText: translations['delete'],
                        cancelText: translations['cancel']
                      } as ConfirmationDialogData
                    });
                    dialogRef.afterClosed().subscribe((confirmed: boolean) => {
                      if (confirmed) {
                        this.deleteEmployee(rowId);
                      }
                    });
                  }
                }
              }
            ]
          }
        },
        columns: [
          { data: 'id', title: translations['id'], visible: false },
          { data: 'name', title: translations['name'] },
          {
            data: 'manager', title: translations['manager'], render: (data, type, row) => {
              if (data !== null) {
                let d = this.employeeIdToEmployeeMap.get(data);
                return d?.name;
              } else {
                return "";
              }
            }
          },
          { data: 'position', title: translations['position'] },
          { data: 'office', title: translations['office'] },
          { data: 'extn', title: translations['extn'] },
          { data: 'start_date', title: translations['start-date'], render: (data: any) => new DatePipe('en-US').transform(data, 'yyyy-MM-dd') },
          { data: 'salary', title: translations['salary'] },
          { data: 'hasManagerRights', title: translations['is-manager'], render: (data) => data ? translations['yes'] : translations['no'] },
        ],
        pageLength: 10,
        lengthMenu: [],
        lengthChange: false,
        info: true,
        infoCallback(settings, start, end, max, total, pre) {
          return 'From ' + start + ' to ' + end + " of " + max + ' rows<br/>';
        },
        select: {
          style: 'single',
          info: false,
        },
        rowId: "id"
      };
      this.table = new DataTable($('#jsonTable3'), dtOptions3);
      this.getEmployees();

      this.table.on('page', () => {
        this.table.rows().deselect();
      });

      this.table.on('order', () => {
        this.table.rows().deselect();
      });

      this.table.on('search', () => {
        this.table.rows().deselect();
      });

      this.table
        .on('select', (e: any, dt: any, type: any, indexes: any) => {
          const buttons = $('.my-button');
          buttons.removeClass("my-disabled-button");
        })
        .on('deselect', (e: any, dt: any, type: any, indexes: any) => {
          const buttons = $('.my-button');
          buttons.addClass("my-disabled-button");
        });
    });
  };


  addEmployee(emp: Employee): void {
    this.employeeService.createEmployee(emp).subscribe({
      next: (res: Employee) => {
        this.employeeIdToEmployeeMap.set(res.id, res);
        this.table.row.add(res).draw();

      },
      error: (err: any) => {
        alert(this.translate.instant('failed-to-add-employee') + ': ' + err.message);
      },
      complete:
        () => { this.getEmployees(); }


    });
  }

  editEmployee(emp: Employee): void {
    this.employeeService.updateEmployee(emp).subscribe({
      next: (res: Employee) => {
        const row = this.table.row('.selected');
        const oldData = row.data();

        // Merge the old data with the new data from the server to handle partial updates
        const newData = { ...oldData, ...res };

        // Update the map to prevent stale manager data
        this.employeeIdToEmployeeMap.set(newData.id, newData);

        // Update the data for the selected row
        row.data(newData);
        newData.managerName = newData.manager?.name;

        // Invalidate all rows to force re-rendering of cells (like manager names)
        // and then redraw the table without changing the current page.
        this.getEmployees();
      },
      error: (err: any) => {
        const dialogRef = this.dialog.open(ErrorDialogComponent, {
          data: {
            title: this.translate.instant('cycle-detected'),
            message: this.translate.instant('user-cannot-be-own-manager'),
            confirmText: this.translate.instant('ok'),

          } as ErrorDialogData
        });
      },
      complete:
        () => { this.table.draw(); }
    });
  }


  deleteEmployee(empId: string) {
    this.employeeService.deleteEmployee(empId).subscribe({
      next: () => {
        this.employeeIdToEmployeeMap.delete(empId);
        this.table.rows(".selected").remove().draw();
        this.table.draw();
      },
      error: (err: any) => {
        this.translate.get([
          'manager-cannot-be-deleted',
          'employee-cannot-subordintes-to-be-deleted'
        ]).subscribe(translations => {
          this.dialog.open(ErrorDialogComponent, {
            data: {
              title: translations['manager-cannot-be-deleted'],
              message: translations['employee-cannot-subordintes-to-be-deleted'],
              confirmText: 'OK',
            } as ErrorDialogData
          });
        });

      }
    });
  }

  getEmployees(): void {
    this.employeeIdToEmployeeMap.clear();
    this.table.clear();
    this.employeeService.getEmployeesWithManagers().subscribe({
      next: (res: Employee[]) => {
        for (let i: number = 0; i < res.length; i++) {
          const employee = res[i];
          this.employeeIdToEmployeeMap.set(employee.id, employee);
        }
        if (res.length > 0) {
          this.table.rows.add(res).draw();
          this.table.draw();
        }

      },
      error: (err: any) => {
        alert(this.translate.instant('failed-to-get-employees') + ': ' + err.message);
      }
    });
  }
}
