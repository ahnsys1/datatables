import { Component, OnInit } from '@angular/core';
import { MatDialog, MatDialogRef } from '@angular/material/dialog';
import 'datatables.net';
import { Config } from 'datatables.net';
import 'datatables.net-buttons';
import 'datatables.net-select'
import DataTable from 'datatables.net-dt';
import { AddEmployeeComponent } from '../add-employee/add-employee.component';
import { EmployeeService } from '../service/EmployeeService';
import { Employee } from '../shared/model/Employee';
import { DatePipe } from '@angular/common';
import { ConfirmationDialogComponent, ConfirmationDialogData } from '../shared/confirmation-dialog';

@Component({
  selector: 'app-data-tables3',
  imports: [],
  templateUrl: './data-tables3.component.html',
  styleUrl: './data-tables3.component.scss'
})
export class DataTables3Component implements OnInit {

  private table!: any;
  private employeeIdToEmployeeMap: Map<string, Employee> = new Map();

  constructor(private dialog: MatDialog, private employeeService: EmployeeService) { }

  ngOnInit(): void {
    const dtOptions3: Config = {
      layout: {
        bottom2Start: {
          buttons: [
            {
              text: 'New employee',
              className: "btn btn-primary",
              action: () => {
                const dialogRef: MatDialogRef<AddEmployeeComponent> = this.dialog.open(AddEmployeeComponent,
                  {
                    disableClose: true,
                    data: { id: null }
                  });
                dialogRef.afterClosed().subscribe(result => {
                  if (!result) {
                    return;
                  }
                  const e: Employee = new Employee(
                    "", // id is generated by backend
                    result.name,
                    result.position,
                    result.salary,
                    result.start_date,
                    result.office,
                    result.extn,
                    result.hasManagerRights,
                    result.manager);
                  this.addEmployee(e);
                });
              }

            },
            {
              text: 'Edit employee',
              className: "my-button my-disabled-button btn btn-primary",
              name: "editButton",
              action: () => {
                const rowData = this.table.row(".selected").data();
                if (rowData == null || rowData == undefined) {
                  return;
                }
                const dialogRef: MatDialogRef<AddEmployeeComponent> =
                  this.dialog.open(AddEmployeeComponent,
                    {
                      disableClose: true,
                      data: rowData
                    }
                  )

                dialogRef.afterClosed().subscribe(result => {
                  if (!result) {
                    return;
                  }
                  const e: Employee = new Employee(
                    result.id,
                    result.name,
                    result.position,
                    result.salary,
                    result.start_date,
                    result.office,
                    result.extn,
                    result.hasManagerRights,
                    result.manager);
                  this.editEmployee(e);
                });

              }
            },
            {
              text: 'Remove employee',
              className: "my-button my-disabled-button btn btn-primary",
              name: "deleteButton",
              action: () => {
                const rowId = this.table.row('.selected').id();
                if (rowId != undefined && rowId != null) {
                  const dialogRef = this.dialog.open(ConfirmationDialogComponent, {
                    data: {
                      title: 'Confirm Delete',
                      message: 'Are you sure you want to delete this employee?',
                      confirmText: 'Delete',
                      cancelText: 'Cancel'
                    } as ConfirmationDialogData
                  });
                  dialogRef.afterClosed().subscribe((confirmed: boolean) => {
                    if (confirmed) {
                      this.deleteEmployee(rowId);
                    }
                  });
                }
              }
            }
          ]
        }
      },
      columns: [
        { data: 'id', title: 'id', visible: false },
        { data: 'name', title: 'Name' },
        {
          data: 'manager', title: 'Manager', render: (data, type, row) => {
            if (data !== null) {
              let d = this.employeeIdToEmployeeMap.get(data);
              return d?.name;
            } else {
              return "";
            }
          }
        },
        { data: 'position', title: 'Position' },
        { data: 'office', title: 'Office' },
        { data: 'extn', title: 'extn' },
        { data: 'start_date', title: 'Start date', render: (data: any) => new DatePipe('en-US').transform(data, 'yyyy-MM-dd') },
        { data: 'salary', title: 'Salary' },
        { data: 'hasManagerRights', title: "is manager", render: (data) => data ? 'Yes' : 'No' },
      ],
      pageLength: 10,
      lengthMenu: [],
      lengthChange: false,
      info: true,
      infoCallback(settings, start, end, max, total, pre) {
        return 'From ' + start + ' to ' + end + " of " + max + ' rows<br/>';
      },
      select: {
        style: 'single',
        info: false,
      },
      rowId: "id"
    }
    this.table = new DataTable($('#jsonTable3'), dtOptions3);
    this.getEmployees();

    this.table.on('page', () => {
      this.table.rows().deselect();
    });

    this.table.on('order', () => {
      this.table.rows().deselect();
    });

    this.table.on('search', () => {
      this.table.rows().deselect();
    });

    this.table
      .on('select', (e: any, dt: any, type: any, indexes: any) => {
        const buttons = $('.my-button');
        buttons.removeClass("my-disabled-button");
      })
      .on('deselect', (e: any, dt: any, type: any, indexes: any) => {
        const buttons = $('.my-button');
        buttons.addClass("my-disabled-button");
      });
  };


  addEmployee(emp: Employee): void {
    this.employeeService.createEmployee(emp).subscribe({
      next: (res: Employee) => {
        this.employeeIdToEmployeeMap.set(res.id, res);
        this.table.row.add(res).draw();

      },
      error: (err: any) => {
        alert('Failed to add employee: ' + err.message);
      },
      complete:
        () => { this.table.draw(); }


    });
  }

  editEmployee(emp: Employee): void {
    this.employeeService.updateEmployee(emp).subscribe({
      next: (res: Employee) => {
        const row = this.table.row('.selected');
        const oldData = row.data();

        // Merge the old data with the new data from the server to handle partial updates
        const newData = { ...oldData, ...res };

        // Update the map to prevent stale manager data
        this.employeeIdToEmployeeMap.set(newData.id, newData);

        // Update the data for the selected row
        row.data(newData);
        newData.managerName = newData.manager?.name;

        // Invalidate all rows to force re-rendering of cells (like manager names)
        // and then redraw the table without changing the current page.
        this.table.rows().invalidate().draw(false);
      },
      error: (err: any) => {
        alert('Failed to edit employee: ' + err.message);
      },
      complete:
        () => { this.table.draw(); }
    });
  }


  deleteEmployee(empId: string) {
    this.employeeService.deleteEmployee(empId).subscribe({
      next: () => {
        this.employeeIdToEmployeeMap.delete(empId);
        this.table.rows(".selected").remove().draw();
        this.table.draw();
      },
      error: (err: any) => {
        alert('Failed to delete employee: ' + err.message);
      }
    });
  }

  getEmployees(): void {
    this.employeeService.getEmployeesWithManagers().subscribe({
      next: (res: Employee[]) => {
        for (let i: number = 0; i < res.length; i++) {
          const employee = res[i];
          this.employeeIdToEmployeeMap.set(employee.id, employee);
        }
        this.table.rows.add(res).draw();
      },
      error: (err: any) => {
        alert('Failed to get employees: ' + err.message);
      }
    });
  }
}
